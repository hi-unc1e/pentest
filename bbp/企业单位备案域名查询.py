# 根据主体名查域名备案信息，优点是：可以不用输入 beian 网的验证码
# https://www.chinaz.net/mall/a_kT1btgYqw7.html

import pandas as pd
import requests

def query_company_info(api_key, company_name):
    url = 'https://openapi.chinaz.net/v1/1001/sponsorsunit'
    params = {
        "APIKey": api_key,
        "ChinazVer": "1.0",
        "companyname": company_name
    }

    try:
        response = requests.get(url, params=params, timeout=60)
        response.raise_for_status()  # 检查HTTP请求的状态
        result = response.json()

        # 判断API返回的状态码
        if result['StateCode'] == 1:
            # 如果Result存在且至少有一个元素，返回第一个元素的MainPage
            main_pages = '; '.join(r['MainPage'] for r in result['Result']) if 'Result' in result and result['Result'] else ''
            return result, main_pages
        else:
            # 返回错误信息
            return result['Reason'], ''
    except requests.exceptions.HTTPError as e:
        # 处理HTTP错误
        return f"HTTP错误: {e.response.status_code}", ''
    except requests.exceptions.RequestException as e:
        # 处理请求异常
        return f"请求异常: {e}", ''
    except Exception as e:
        # 处理其他异常
        return f"系统异常: {e}", ''

def process_excel(api_key, excel_file):
    # 读取Excel文件
    df = pd.read_excel(excel_file)

    # 初始化B和C列的列表
    column_B = []
    column_C = []

    # 遍历A列的每个公司名称
    for companyname in df['A']:
        result, main_pages = query_company_info(api_key, companyname)
        column_B.append(result)
        column_C.append(main_pages)

    # 将B和C列的结果赋值给DataFrame
    df['B'] = column_B
    df['C'] = column_C

    # 将更新后的DataFrame写入新的Excel文件
    df.to_excel('updated_excel_file.xlsx', index=False)

    print("Excel文件处理完成，结果已保存到 updated_excel_file.xlsx")

# API密钥
api_key = '你的API密钥'
# Excel文件路径
excel_file = 'your_excel_file.xlsx'

# 处理Excel文件
process_excel(api_key, excel_file)
